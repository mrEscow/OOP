//--------------------------------------------------------------------------------------------------------------------------------------
//	Начиная с этого урока, будем с использованием полученных знаний по ООП создавать игру Blackjack.
//	Суть проста : раздаются карты, за каждую из которых начисляются очки.Игрок пытается заработать 21 очко, не больше.
//	За каждую карту с числом дается столько очков, сколько на ней указано.
//	За туз — либо 1 очко, либо 11 (что больше подходит игроку), а за валета, даму и короля — по 10 очков.
//	Компьютер выступает дилером и играет против группы от одного до семи игроков.
//	В начале кона все участники, включая дилера, получают две карты.
//	Игроки могут видеть все свои карты, а также сумму очков.
//	Однако одна из карт дилера скрыта на протяжении всего кона.
//	Далее каждый игрок может брать дополнительные карты.
//	Если сумма очков у него превысит 21, он проигрывает.
//	Когда все игроки получили возможность набрать дополнительные карты, дилер открывает скрытую карту.
//	Далее он обязан брать новые карты до тех пор, пока сумма его очков не превышает 16. 
//	Если у дилера перебор, все игроки, не имеющие перебора, побеждают.
//	В противном случае сумма очков каждого из оставшихся игроков сравнивается с суммой очков дилера.
//	Игрок побеждает, если сумма его очков больше, чем у дилера.В противном случае — проигрывает.
//	Если суммы очков игрока и дилера одинаковы, засчитывается ничья.
//--------------------------------------------------------------------------------------------------------------------------------------

#pragma once



using namespace std;

//--------------------------------------------------------------------------------------------------------------------------------------
//Создать класс Card, описывающий карту в игре БлэкДжек.
//У этого класса должно быть три поля : масть, значение карты и положение карты(вверх лицом или рубашкой).
//Сделать поля масть и значение карты типом перечисления(enum).Положение карты - тип bool.Также в этом классе должно быть два метода :
//метод Flip(), который переворачивает карту, т.е.если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот.
//метод GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.
//--------------------------------------------------------------------------------------------------------------------------------------

class Card {
private:

	enum Suit { Hearts, spades, diamonds, clubs } m_Suit;

	enum  Rank {
		ace = 1,
		deuce,
		three,
		four,
		five,
		six,
		seven,
		eight,
		nine,
		ten,
		jack = 10,
		queen = 10,
		king = 10
	} m_Rank;

	bool m_isFaceUp;

public:

	bool Flip() {
		return !m_isFaceUp;
	}

	int GetValue() {
		return m_Rank;
	}
};

//---------------------------------------------------------------------------------------------------------------------------------------------
//	Реализовать класс Hand, который представляет собой коллекцию карт.
//	В классе будет одно поле : вектор указателей карт
//	(удобно использовать вектор, т.к.это по сути динамический массив, а тип его элементов должен быть - указатель на объекты класса Card).
//	Также в классе Hand должно быть 3 метода :
//	метод Add, который добавляет в коллекцию карт новую карту, соответственно он принимает в качестве параметра указатель на новую карту
//	метод Clear, который очищает руку от карт
//	метод GetValue, который возвращает сумму очков карт руки(здесь предусмотреть возможность того, что туз может быть равен 11).
//---------------------------------------------------------------------------------------------------------------------------------------------

class Hard {
private:

	vector<Card*> m_Cards;

public:

	void Add(Card* pCard) {
		m_Cards.push_back(pCard);
	}

	void Clear() {
		m_Cards.clear();
	}

	int GetTotal() {
		int sum{ 0 };
		for (auto card : m_Cards) {
			if (sum <= 10 && card->GetValue() == 1)
				sum += 11;
			else
				sum += card->GetValue();
		}
			
		return sum;
	}
};

class GenericPlayer {

};

class Player {

};

class House {

};

class Deck {

};

class Game {
public:
	Game(vector<string> names) {

	}

	void Play() {

	}
};

void Blackjack() {
	cout << "\t\tWelcome to Blackjack!\n\n";

	int numPlayers = 0;
	while (numPlayers < 1 || numPlayers > 7)
	{
		cout << "How many players? (1 - 7): ";
		//cin >> numPlayers;
		numPlayers = 1;
	}

	vector<string> names;
	string name;
	for (int i = 0; i < numPlayers; ++i)
	{
		cout << "Enter player name: ";
		cin >> name;
		names.push_back(name);
	}
	cout << endl;

	// игровой цикл
	Game aGame(names);
	char again = 'y';
	while (again != 'n' && again != 'N')
	{
		aGame.Play();
		cout << "\nDo you want to play again? (Y/N): ";
		//cin >> again;
		again = 'n';
	}


}


