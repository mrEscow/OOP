
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------
//	������� � ����� �����, ����� � �������������� ���������� ������ �� ��� ��������� ���� Blackjack.
//	���� ������ : ��������� �����, �� ������ �� ������� ����������� ����.����� �������� ���������� 21 ����, �� ������.
//	�� ������ ����� � ������ ������ ������� �����, ������� �� ��� �������.
//	�� ��� � ���� 1 ����, ���� 11 (��� ������ �������� ������), � �� ������, ���� � ������ � �� 10 �����.
//	��������� ��������� ������� � ������ ������ ������ �� ������ �� ���� �������.
//	� ������ ���� ��� ���������, ������� ������, �������� ��� �����.
//	������ ����� ������ ��� ���� �����, � ����� ����� �����.
//	������ ���� �� ���� ������ ������ �� ���������� ����� ����.
//	����� ������ ����� ����� ����� �������������� �����.
//	���� ����� ����� � ���� �������� 21, �� �����������.
//	����� ��� ������ �������� ����������� ������� �������������� �����, ����� ��������� ������� �����.
//	����� �� ������ ����� ����� ����� �� ��� ���, ���� ����� ��� ����� �� ��������� 16. 
//	���� � ������ �������, ��� ������, �� ������� ��������, ���������.
//	� ��������� ������ ����� ����� ������� �� ���������� ������� ������������ � ������ ����� ������.
//	����� ���������, ���� ����� ��� ����� ������, ��� � ������.� ��������� ������ � �����������.
//	���� ����� ����� ������ � ������ ���������, ������������� �����.
//--------------------------------------------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------------------------------------------
//	������� ����� Card, ����������� ����� � ���� ��������.
//	� ����� ������ ������ ���� ��� ���� : �����, �������� ����� � ��������� �����(����� ����� ��� ��������).
//	������� ���� ����� � �������� ����� ����� ������������(enum).��������� ����� - ��� bool.����� � ���� ������ ������ ���� ��� ������ :
//	����� Flip(), ������� �������������� �����, �.�.���� ��� ���� �������� �����, �� �� �� ������������ ����� �����, � ��������.
//	����� GetValue(), ������� ���������� �������� �����, ���� ����� �������, ��� ��� = 1.
//--------------------------------------------------------------------------------------------------------------------------------------

class Card {
public:
	enum Suit { Hearts, spades, diamonds, clubs } ;
	enum Rank {
		ace = 1,
		deuce, three, four, five, six, seven, eight, nine, ten,
		jack = 10,
		queen = 10,
		king = 10
	} ;

	
private:
	Suit m_Suit;
	Rank m_Rank;
	bool m_isFaceUp;

public:
	Card(Rank rank, Suit suit, bool ifu) : m_Rank(rank), m_Suit(suit), m_isFaceUp(ifu) {}
	void Flip() {
		m_isFaceUp = !m_isFaceUp;
	}

	int GetValue() {
		//���� ����� ����������� ����� ����, �� �������� ����� �
		int value = 0;
		if (m_isFaceUp) {
			value = m_Rank;
		}
		return value;
	}
};

//---------------------------------------------------------------------------------------------------------------------------------------------
//	����������� ����� Hand, ������� ������������ ����� ��������� ����.
//	� ������ ����� ���� ���� : ������ ���������� ����
//	(������ ������������ ������, �.�.��� �� ���� ������������ ������, � ��� ��� ��������� ������ ���� - ��������� �� ������� ������ Card).
//	����� � ������ Hand ������ ���� 3 ������ :
//	����� Add, ������� ��������� � ��������� ���� ����� �����, �������������� �� ��������� � �������� ��������� ��������� �� ����� �����
//	����� Clear, ������� ������� ���� �� ����
//	����� GetValue, ������� ���������� ����� ����� ���� ����(����� ������������� ����������� ����, ��� ��� ����� ���� ����� 11).
//---------------------------------------------------------------------------------------------------------------------------------------------

class Hand {
protected:
	vector<Card*> m_Cards;

public:
	Hand() { m_Cards.reserve(7); }
	
	virtual ~Hand(); // ����������� ����������


	void Add(Card* pCard) {
		m_Cards.push_back(pCard);
	}

	void Clear() {
		// �������� �� �������, ���������� ��� ������ � ����
		vector<Card*>::iterator iter = m_Cards.begin();
		for (iter = m_Cards.begin(); iter != m_Cards.end(); ++iter)
		{
			delete* iter;
			*iter = 0;
		}
		// ������� ������ ����������
		m_Cards.clear();

	}

	int GetTotal() const {
		// ���� ���� � ���� ���, ���������� �������� 0
		if (m_Cards.empty()) return 0;
		//���� ������ ����� ����� �������� 0, �� ��� ����� �������� �����:
		// ������� �������� 0
		if (m_Cards[0]->GetValue() == 0) return 0;
		int sum{ 0 };
		// ������� ����� ����� ���� ����, ������ ��� ���� 1 ����
		for (auto card : m_Cards) 
			sum += card->GetValue();
		// ����������, ������ �� ���� ���
		bool containsAce = false;
		for (auto card : m_Cards)
			if (card->GetValue() == Card::ace)
				containsAce = true;
		// ���� ���� ������ ��� � ����� �������� ���������, ��� ���� 11 �����
		if (containsAce && sum <= 11)
		{
			// ��������� ������ 10 �����, ��������� �� ��� ��������
			// �� ������ ��� �� ������ ����
			sum += 10;
		}

			
		return sum;
	}
};


Hand::~Hand() { Clear(); }

//---------------------------------------------------------------------------------------------------------------------------------------------
//	�������� �������� �������, ������� ������������ � ��������� � ����� 3, �� ������ Hand ��������� ����� GenericPlayer, 
//	������� ��������� ������������ ������, ���� � ��� ����� ��� ���� ������� - ������� � ���������.
//	������� ����� GenericPlayer, � ������� �������� ���� name - ��� ������.����� �������� 3 ������:
//	IsHitting() - ����� ����������� �������, ���������� ����������, ����� �� ������ ��� ���� �����.
//	IsBoosted() - ���������� bool ��������, ���� �� � ������ �������
//	Bust() - ������� �� ����� ��� ������ � ���������, ��� � ���� �������.
//---------------------------------------------------------------------------------------------------------------------------------------------

class GenericPlayer : protected Hand{
private:
	string m_name;
public:
	GenericPlayer(string name) : m_name(name) {}

	virtual bool IsHitting() = 0;

	bool IsBoosted() {
		if (GetTotal() > 21)
			return true;
		else
			return false;
	}
	void Bust() {
		cout << m_name << " has too many points!" << endl;
	}

};

class Player {

};

class House {

};

class Deck {

};

class Game {
public:
	Game(vector<string> names) {

	}

	void Play() {

	}
};

void Blackjack() {
	cout << "\t\tWelcome to Blackjack!\n\n";

	int numPlayers = 0;
	while (numPlayers < 1 || numPlayers > 7)
	{
		cout << "How many players? (1 - 7): ";
		//cin >> numPlayers;
		numPlayers = 1;
	}

	vector<string> names;
	string name;
	for (int i = 0; i < numPlayers; ++i)
	{
		cout << "Enter player name: ";
		cin >> name;
		names.push_back(name);
	}
	cout << endl;

	// ������� ����

	Game aGame(names);
	char again = 'y';
	while (again != 'n' && again != 'N')
	{
		aGame.Play();
		cout << "\nDo you want to play again? (Y/N): ";
		//cin >> again;
		again = 'n';
	}


}