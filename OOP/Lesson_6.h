#pragma once

//----------------------------------------------------------------------------------------------------------
//	Создать программу, которая считывает целое число типа int.
//	И поставить «защиту от дурака» : если пользователь вводит что - то кроме одного целочисленного значения, 
//	нужно вывести сообщение об ошибке и предложить ввести число еще раз.
//	Пример неправильных введенных строк :
//	rbtrb
//	nj34njkn
//	1n
//----------------------------------------------------------------------------------------------------------

class ReadInt {
private:
    int m_date{ 0 };
    bool m_is_empty{ 1 };
public:
 

     friend istream& operator>> (istream& in, ReadInt& date){
         while (true)
         {
             cout << "Enter a int value: ";
             //double a;
             // обратите внимание, параметр date (объект класса ReadInt) должен быть не константным, чтобы мы имели возможность изменить члены класса
             in >> date.m_date;
             
             // Проверка на предыдущее извлечение
             if (in.fail()) // если предыдущее извлечение оказалось неудачным,
             {
                 in.clear(); // то возвращаем cin в 'обычный' режим работы
                 in.ignore(32767, '\n'); // и удаляем значения предыдущего ввода из входного буфера
                 cout << "Oops, that input is invalid.  Please try again." << endl;
                 continue; // просим пользователя ввести свой возраст еще раз
             }
             else
             {
                 in.ignore(32767, '\n'); // удаляем лишние значения 
                 if (std::cin.gcount() > 1) // если мы очистили более одного символа
                 {
                     cout << "Oops, that input is invalid.  Please try again." << endl;
                     continue; // то этот ввод считается некорректным, и мы просим пользователя ввести цифру заного
                 }
                     

                 date.m_is_empty = !true; // если всё хорошо то разрешаем извлечение
                 
                 return in;
             }
         }
     }

     friend ostream& operator<< (ostream& out, const ReadInt& date){
         if (!date.m_is_empty) {
             out << date.m_date;
             return out;
         }
         else {
             cout << "The object of the ReadInt class is empty." << endl;
             return out;
         }
     }

};


//-------------------------------------------------------------------------------------------------------------------------------
//	Создать собственный манипулятор endll для стандартного потока вывода, который выводит два перевода строки и сбрасывает буфер.
//-------------------------------------------------------------------------------------------------------------------------------

ostream& endll (ostream& out){  
    out << "\n" << endl;
    return out;
}



void Lesson_6() {
	cout << "Lesson_6" << endl;
	cout << "----------------" << endl;
    ReadInt readint;
    cin >> readint;
    cout << readint << endl;
    cout << "----------------" << endl;   
    cout << "doble endl" << endll;
    cout << "----------------" << endl;
}
