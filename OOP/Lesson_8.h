#pragma once

#pragma execution_character_set("utf-8")

//----------------------------------------------------------------------------------------------------------------------------------
//	Написать шаблонную функцию div, 
//	которая должна вычислять результат деления двух параметров и запускать исключение DivisionByZero, если второй параметр равен 0. 
//	В функции main выводить результат вызова функции div в консоль, а также ловить исключения.
//----------------------------------------------------------------------------------------------------------------------------------

namespace LS_8{
	template<typename T1, typename T2>
	T2 div(T1 one, T2 two) {
		if (two == 0)
			throw "DivisionByZero";
		return one / two;
	}
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
//	Написать класс Ex, хранящий вещественное число x и имеющий конструктор по вещественному числу, инициализирующий x значением параметра.
//	Написать класс Bar, хранящий вещественное число y(конструктор по умолчанию инициализирует его нулем) и имеющий метод set с единственным вещественным параметром a.
//	Если y + a > 100, возбуждается исключение типа Ex с данными a* y, иначе в y заносится значение a.
//	В функции main завести переменную класса Bar и в цикле в блоке try вводить с клавиатуры целое n.
//	Использовать его в качестве параметра метода set до тех пор, пока не будет введено 0. 
//	В обработчике исключения выводить сообщение об ошибке, содержащее данные объекта исключения.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Ex {
	float x;
public:
	Ex(float x) : x{x} {}
	float getError() { return x; }
};

class Bar {
	float y;
public:
	Bar() : y{0} {}

	void set(float a) {
		if ((y + a) > 100)
			throw Ex(a* y);
		else
			y = a;
	}
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//	Написать класс «робот», моделирующий перемещения робота по сетке 10x10, у которого есть метод, означающий задание переместиться на соседнюю позицию.
//	Эти методы должны запускать классы - исключения OffTheField, если робот должен уйти с сетки, и IllegalCommand, если подана неверная команда(направление не находится в нужном диапазоне).
//	Объект исключения должен содержать всю необходимую информацию — текущую позицию и направление движения.
//	Написать функцию main, пользующуюся этим классом и перехватывающую все исключения от его методов, а также выводящую подробную информацию о всех возникающих ошибках.
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void Lesson_8() {
	cout << "Lesson_8" << endl;
	cout << "----------------" << endl;
	{
		try {
			cout << LS_8::div(2.5, 0.0) << endl;
		}
		catch (const char*) {
			cout << "Nenene na nol delit nelzia" << endl;
		}
		catch (...) {
			// эллипсис(…)
		}
	}
	cout << "----------------" << endl;
	{
		Bar bar;
		float a{-1};
		try {
			while (a != 0) {
				cout << "Input float please: ";
				cin >> a;
				bar.set(a);				
			}
		}
		catch(Ex& a){
			cout << "EX: " << a.getError() <<  endl;
		}
	}
	cout << "----------------" << endl;
	{

	}
	cout << "----------------" << endl;
}